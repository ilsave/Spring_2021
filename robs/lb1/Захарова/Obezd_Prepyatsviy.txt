"""Braitenberg-based obstacle-avoiding robot controller."""

from controller import Robot
# import Compass module
from controller import Compass



# Get reference to the robot.
robot = Robot()

# Get simulation step length.
timeStep = int(robot.getBasicTimeStep())

# Constants of the Thymio II motors and distance sensors.
maxMotorVelocity = 9.53
distanceSensorCalibrationConstant = 360

# Get left and right wheel motors.
leftMotor = robot.getMotor("motor.left")
rightMotor = robot.getMotor("motor.right")

# Get frontal distance sensors.
outerLeftSensor = robot.getDistanceSensor("prox.horizontal.0")
centralLeftSensor = robot.getDistanceSensor("prox.horizontal.1")
centralSensor = robot.getDistanceSensor("prox.horizontal.2")
centralRightSensor = robot.getDistanceSensor("prox.horizontal.3")
outerRightSensor = robot.getDistanceSensor("prox.horizontal.4")

# Enable distance sensors.
outerLeftSensor.enable(timeStep)
centralLeftSensor.enable(timeStep)
centralSensor.enable(timeStep)
centralRightSensor.enable(timeStep)
outerRightSensor.enable(timeStep)

# Disable motor PID control mode.
leftMotor.setPosition(float('inf'))
rightMotor.setPosition(float('inf'))

# Set ideal motor velocity.
initialVelocity = 0.7 * maxMotorVelocity

# Set the initial velocity of the left and right wheel motors.
leftMotor.setVelocity(initialVelocity)
rightMotor.setVelocity(initialVelocity)

# get robot's Compass device
compass = robot.getCompass("compass")

# enable the Compass
compass.enable(timeStep)

while robot.step(timeStep) != -1:
     # chitaem dannye s kompasa
    values = compass.getValues()
    
    # chitaem dannye s datchikov o nalichie prepyatsyviy
    outerLeftSensorValue = outerLeftSensor.getValue() / distanceSensorCalibrationConstant
    centralLeftSensorValue = centralLeftSensor.getValue() / distanceSensorCalibrationConstant
    centralSensorValue = centralSensor.getValue() / distanceSensorCalibrationConstant
    centralRightSensorValue = centralRightSensor.getValue() / distanceSensorCalibrationConstant
    outerRightSensorValue = outerRightSensor.getValue() / distanceSensorCalibrationConstant
    
    #esli slevo est' prepyatstvie, to povorachivaem napravo, zamedlyaya pravoe koleso
    if centralLeftSensorValue != 0 or outerLeftSensorValue != 0:
        leftMotor.setVelocity(initialVelocity)
        rightMotor.setVelocity(-initialVelocity)
    #esli spravo est' prepyatstvie, to povorachivaem nalevo, zamedlyaya levoe koleso
    elif centralRightSensorValue != 0 or outerRightSensorValue != 0:
        leftMotor.setVelocity(-initialVelocity)
        rightMotor.setVelocity(initialVelocity)
    #sveryam dannye s kompasa, chtoby on dvigalsya v storonu krasnoy linii
    else: 
        if (values[0] < 0.001):
            leftMotor.setVelocity(initialVelocity/1.1)
            rightMotor.setVelocity(initialVelocity)
        elif (values[0] > 0.001):
            leftMotor.setVelocity(initialVelocity)
            rightMotor.setVelocity(initialVelocity/1.1)
        else: 
            leftMotor.setVelocity(initialVelocity)
            rightMotor.setVelocity(initialVelocity)
        
        