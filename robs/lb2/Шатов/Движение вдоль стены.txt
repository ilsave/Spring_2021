"""Sample Webots controller for the wall following benchmark."""

from controller import Robot
from math import sqrt


def getDistance(sensor):
    """
    Return the distance of an obstacle for a sensor.

    The value returned by the getValue() method of the distance sensors
    corresponds to a physical value (here we have a sonar, so it is the
    strength of the sonar ray). This function makes a conversion to a
    distance value in meters.
    """
    return ((1000 - sensor.getValue()) / 1000) * 5


# Maximum speed for the velocity value of the wheels.
# Don't change this value.
MAX_SPEED = 5.24

# Get pointer to the robot.
robot = Robot()

# Get the time step of the current world.
timestep = int(robot.getBasicTimeStep())

# Get pointer to the robot wheels motors.
leftWheel = robot.getMotor('left wheel')
rightWheel = robot.getMotor('right wheel')

# We will use the velocity parameter of the wheels, so we need to
# set the target position to infinity.
leftWheel.setPosition(float('inf'))
rightWheel.setPosition(float('inf'))

# Get and enable the distance sensors.
sideSensor0 = robot.getDistanceSensor("so0")
sideSensor0.enable(timestep)
sideSensor1 = robot.getDistanceSensor("so1")
sideSensor1.enable(timestep)
sideSensor2 = robot.getDistanceSensor("so2")
sideSensor2.enable(timestep)
sideSensor3 = robot.getDistanceSensor("so3")
sideSensor3.enable(timestep)
sideSensor4 = robot.getDistanceSensor("so4")
sideSensor4.enable(timestep)
sideSensor5 = robot.getDistanceSensor("so5")
sideSensor5.enable(timestep)
sideSensor15 = robot.getDistanceSensor("so15")
sideSensor15.enable(timestep)

# Move forward until we are 50 cm away from the wall.

leftWheel.setVelocity(MAX_SPEED)
rightWheel.setVelocity(MAX_SPEED)
while robot.step(timestep) != -1:
    if getDistance(sideSensor3) < 0.25:
        break

# Rotate clockwise until the wall is to our left.
leftWheel.setVelocity(MAX_SPEED)
rightWheel.setVelocity(-MAX_SPEED)
while robot.step(timestep) != -1:
    # Rotate until there is a wall to our left, and nothing in front of us.
    if getDistance(sideSensor15) < 0.26:
        break



kp = 0.5 # koef propor zvena
kd = 0.3 # koef dif zvena
old_sideSensor1 = 0.25 #last value of signal
old_sideSensor2 = 0.25 #last value of signal
old_sideSensor3 = 0.25 #last value of signal
old_sideSensor0 = 0.25 #last value of signal

ki = 0.001
iMin = -0.2 
iMax = 0.2
iSum = 0



# Main loop.
while robot.step(timestep) != -1:
    
    if getDistance(sideSensor0) > 0.25 and getDistance(sideSensor1) > 0.3:
        leftWheel.setVelocity(MAX_SPEED * 0.55)
        rightWheel.setVelocity(MAX_SPEED)
    
    elif getDistance(sideSensor3) < 0.5:
        leftWheel.setVelocity(MAX_SPEED)
        rightWheel.setVelocity(MAX_SPEED * 0.3)
    
    elif getDistance(sideSensor1) != 5:
        realDistanceToWall = getDistance(sideSensor1)
        expectedDistanceToWall = sqrt(0.125)
        old_sideSensor1 = getDistance(sideSensor1)

        old_y = old_sideSensor1
        
        
        error = expectedDistanceToWall - realDistanceToWall
        #print(getDistance(sideSensor1))
        
        
        iSum = iSum+error
        if(iSum<iMin): 
            iSum = iMin
        if(iSum>iMax): 
            iSum = iMax
        ui = ki*iSum
        
        
        # propor componenta
        up = kp*error
        #print(up)
        # dif componenta
        ud = kd*(realDistanceToWall - old_y)
        #print(ud)
        old_y = realDistanceToWall
        PIDctl = up+ud+ui
        
        #print(PIDctl)
        
        if abs(PIDctl) > 1:
            leftWheel.setVelocity(MAX_SPEED * 0.3)
            rightWheel.setVelocity(MAX_SPEED)
        
        elif PIDctl > 0:
            leftWheel.setVelocity(MAX_SPEED)
            rightWheel.setVelocity(MAX_SPEED * PIDctl)
        # Too far from the wall, we need to turn left.
        elif PIDctl < 0:
            leftWheel.setVelocity(MAX_SPEED * PIDctl)
            rightWheel.setVelocity(MAX_SPEED)
        else:
            leftWheel.setVelocity(MAX_SPEED)
            rightWheel.setVelocity(MAX_SPEED)
    
    elif getDistance(sideSensor2) != 5:
        realDistanceToWall = getDistance(sideSensor2)
        expectedDistanceToWall = sqrt(0.125)

        old_sideSensor2 = getDistance(sideSensor2)

        old_y = old_sideSensor2
        
        
        error = expectedDistanceToWall - realDistanceToWall
        #print(getDistance(sideSensor1))
        
        
        iSum = iSum+error
        if(iSum<iMin): 
            iSum = iMin
        if(iSum>iMax): 
            iSum = iMax
        ui = ki*iSum
        
        
        # propor componenta
        up = kp*error
        #print(up)
        # dif componenta
        ud = kd*(realDistanceToWall - old_y)
        #print(ud)
        old_y = realDistanceToWall
        PIDctl = up+ud+ui
        
        #print(PIDctl)
        
        if abs(PIDctl) > 1:
            leftWheel.setVelocity(MAX_SPEED * 0.5)
            rightWheel.setVelocity(MAX_SPEED)
        
        elif PIDctl > 0:
            leftWheel.setVelocity(MAX_SPEED)
            rightWheel.setVelocity(MAX_SPEED * PIDctl)
        # Too far from the wall, we need to turn left.
        elif PIDctl < 0:
            leftWheel.setVelocity(MAX_SPEED * PIDctl)
            rightWheel.setVelocity(MAX_SPEED)
        else:
            leftWheel.setVelocity(MAX_SPEED)
            rightWheel.setVelocity(MAX_SPEED)
        
        
        
    elif getDistance(sideSensor0) != 5:
        realDistanceToWall = getDistance(sideSensor0)
        expectedDistanceToWall = 0.26

        old_sideSensor0 = getDistance(sideSensor0)
        old_y = old_sideSensor0
        
        
        error = expectedDistanceToWall - realDistanceToWall
        #print(getDistance(sideSensor1))
        
        
        iSum = iSum+error
        if(iSum<iMin): 
            iSum = iMin
        if(iSum>iMax): 
            iSum = iMax
        ui = ki*iSum
        
        
        # propor componenta
        up = kp*error
        #print(up)
        # dif componenta
        ud = kd*(realDistanceToWall - old_y)
        #print(ud)
        old_y = realDistanceToWall
        PIDctl = up+ud+ui
        
        #print(PIDctl)
        
        if abs(PIDctl) > 1:
            leftWheel.setVelocity(MAX_SPEED * 0.5)
            rightWheel.setVelocity(MAX_SPEED)
        
        elif PIDctl > 0:
            leftWheel.setVelocity(MAX_SPEED)
            rightWheel.setVelocity(MAX_SPEED * PIDctl)
        # Too far from the wall, we need to turn left.
        elif PIDctl < 0:
            leftWheel.setVelocity(MAX_SPEED * PIDctl)
            rightWheel.setVelocity(MAX_SPEED)
        else:
            leftWheel.setVelocity(MAX_SPEED)
            rightWheel.setVelocity(MAX_SPEED)
        
        
    # elif getDistance(sideSensor0) == 5:
    #     leftWheel.setVelocity(MAX_SPEED*0.5)
    #     rightWheel.setVelocity(MAX_SPEED)
    # else:
    #     leftWheel.setVelocity(MAX_SPEED)
    #     rightWheel.setVelocity(-MAX_SPEED)
    #     realDistanceToWall = 0
    #     expectedDistanceToWall = 0

        



# Stop the robot when we are done.
leftWheel.setVelocity(0)
rightWheel.setVelocity(0)